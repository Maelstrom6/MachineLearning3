install.packages("caTools")
q()
setwd("~/PycharmProjects/MachineLearning2/SVM")
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[, 3:5]
# Split data
library(caTools)
set.seed(123)
split = sample.split(dataset, SplitRatio = 0.75)
train = subset(dataset, split == TRUE)
test = subset(dataset, plit == FALSE)
# Feature scaling
train[, 1:2] = scale(train[, 1:2])
test[, 1:2] = scale(test[, 1:2])
# Fitting the model
install.packages("e1071")
split = sample.split(dataset, SplitRatio = 0.75)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
# Feature scaling
train[, 1:2] = scale(train[, 1:2])
test[, 1:2] = scale(test[, 1:2])
library(e1071)
test[Purchased]
test["Purchased"]
classifier = svm(formula = Purchased ~ .,
data = train,
type = "C-classification",
kernel = "linear")
y_pred = predict(classifier, newdata = test[-3])
y_pred
cm = table(test[,3], y_pred)
cm
split = sample.split(dataset, SplitRatio = 0.75)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
split = sample.split(dataset, 0.75)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
split = sample.split(dataset, 0.79)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
split = sample.split(dataset, 0.75)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
split = sample.split(dataset, 0.80)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
split = sample.split(dataset, 0.90)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
split = sample.split(dataset, 0.79)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
split = sample.split(dataset, 0.75)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
split = sample.split(dataset$Purchased, 0.75)
train = subset(dataset, split == TRUE)
test = subset(dataset, split == FALSE)
train[, 1:2] = scale(train[, 1:2])
test[, 1:2] = scale(test[, 1:2])
classifier = svm(formula = Purchased ~ .,
data = train,
type = "C-classification",
kernel = "linear")
y_pred = predict(classifier, newdata = test[-3])
cm = table(test[,3], y_pred)
cm
library(ElemStatLearn)
set = train
X1 = seq(min(set[, 1]) -1, max(set[, 1]) + 1, by=0.1)
X2 = seq(min(set[, 2]) -1, max(set[, 2]) + 1, by=0.1)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age", "EstimatedSalary")
y_grid = knn(train[, -3],
grid_set,
train[, 3],
k = 5)
plot(set[, -3],
main = "KNN Regression",
xlab = "Age",
ylab = "Salary",
xlim = range(X1),
ylim = range(X2))
contour(X1, X2,
matrix(as.numeric(y_grid), length(X1), length(X2)),
add=TRUE)
points(grid_set, pch=".", col=ifelse(y_grid == 1, "springgreen3", "tomato"))
points(set, pch=21, bg=ifelse(set[, 3] == 1, "green4", "red3"))
y_pred
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = "SVM Regression",
xlab = "Age",
ylab = "Salary",
xlim = range(X1),
ylim = range(X2))
contour(X1, X2,
matrix(as.numeric(y_grid), length(X1), length(X2)),
add=TRUE)
points(grid_set, pch=".", col=ifelse(y_grid == 1, "springgreen3", "tomato"))
points(set, pch=21, bg=ifelse(set[, 3] == 1, "green4", "red3"))
plot(set[, -3],
main = "SVM Regression",
xlab = "Age",
ylab = "Salary",
xlim = range(unscale(X1)),
ylim = range(unscale(X2)))
contour(unscale(X1), unscale(X2),
matrix(as.numeric(y_grid), length(X1), length(X2)),
add=TRUE)
points(grid_set, pch=".", col=ifelse(y_grid == 1, "springgreen3", "tomato"))
points(set, pch=21, bg=ifelse(set[, 3] == 1, "green4", "red3"))
plot(set[, -3],
main = "SVM Regression",
xlab = "Age",
ylab = "Salary",
xlim = range((X1*attr(X1,'scaled:scale') + attr(X1, 'scaled:center'))),
ylim = range((X2*attr(X2,'scaled:scale') + attr(X2, 'scaled:center'))))
contour((X1*attr(X1,'scaled:scale') + attr(X1, 'scaled:center')),
(X2*attr(X2,'scaled:scale') + attr(X2, 'scaled:center')),
matrix(as.numeric(y_grid), length(X1), length(X2)),
add=TRUE)
points(grid_set, pch=".", col=ifelse(y_grid == 1, "springgreen3", "tomato"))
points(set, pch=21, bg=ifelse(set[, 3] == 1, "green4", "red3"))
set = train*attr(train,'scaled:scale') + attr(train, 'scaled:center') ### new
X1 = seq(min(set[, 1]) -1, max(set[, 1]) + 1, by=0.1)
X2 = seq(min(set[, 2]) -1, max(set[, 2]) + 1, by=0.1)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age", "EstimatedSalary")
grid_set = scale(grid_set) ### new
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = "SVM Regression",
xlab = "Age",
ylab = "Salary",
xlim = range(X1),
ylim = range(X2))
contour(X1,
X2,
matrix(as.numeric(y_grid), length(X1), length(X2)),
add=TRUE)
points(grid_set, pch=".", col=ifelse(y_grid == 1, "springgreen3", "tomato"))
points(set, pch=21, bg=ifelse(set[, 3] == 1, "green4", "red3"))
set = train*attr(train,'scaled:scale') + attr(train, 'scaled:center') ### new
print(length(attr(train,'scaled:scale')))
print((attr(train,'scaled:scale')))
unscale <- function(z, center = attr(z, "scaled:center"), scale = attr(z, "scaled:scale")) {
if(!is.null(scale))  z <- sweep(z, 2, scale, `*`)
if(!is.null(center)) z <- sweep(z, 2, center, `+`)
structure(z,
"scaled:center"   = NULL,
"scaled:scale"    = NULL,
"unscaled:center" = center,
"unscaled:scale"  = scale
)
}
set = unscale(train)### new
X1 = seq(min(set[, 1]) -1, max(set[, 1]) + 1, by=0.1)
X2 = seq(min(set[, 2]) -1, max(set[, 2]) + 1, by=0.1)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age", "EstimatedSalary")
grid_set = scale(grid_set) ### new
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = "SVM Regression",
xlab = "Age",
ylab = "Salary",
xlim = range(X1),
ylim = range(X2))
contour(X1,
X2,
matrix(as.numeric(y_grid), length(X1), length(X2)),
add=TRUE)
points(grid_set, pch=".", col=ifelse(y_grid == 1, "springgreen3", "tomato"))
points(set, pch=21, bg=ifelse(set[, 3] == 1, "green4", "red3"))
X1
set
set = train### new
X1 = seq(min(set[, 1]) -1, max(set[, 1]) + 1, by=0.1)
X2 = seq(min(set[, 2]) -1, max(set[, 2]) + 1, by=0.1)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age", "EstimatedSalary")
#grid_set = scale(grid_set) ### new
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = "SVM Regression",
xlab = "Age",
ylab = "Salary",
xlim = range(X1),
ylim = range(X2))
contour(X1,
X2,
matrix(as.numeric(y_grid), length(X1), length(X2)),
add=TRUE)
points(grid_set, pch=".", col=ifelse(y_grid == 1, "springgreen3", "tomato"))
points(set, pch=21, bg=ifelse(set[, 3] == 1, "green4", "red3"))
